def compute_psnr(target, gen_output):
    mse = tf.reduce_mean(tf.square(target - gen_output))
    max_pixel = 1.0  # Assuming pixel values are normalized to the range [0, 1]
    psnr = 10 * tf.math.log(max_pixel ** 2 / mse) / tf.math.log(10.0)
    return psnr


def compute_mrae(target, gen_output, epsilon=1e-10):
    abs_diff = tf.abs(target - gen_output)
    relative_abs_diff = abs_diff / (tf.abs(target) + epsilon)
    mrae = tf.reduce_mean(relative_abs_diff)
    return mrae


def compute_rmse(target, gen_output):
    mse = tf.reduce_mean(tf.square(target - gen_output))
    rmse = tf.sqrt(mse)
    return rmse


@tf.function
def train_step(input_image, target, step):
    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
        gen_output = generator(input_image, training=True)

        disc_real_output = discriminator([input_image, target], training=True)
        disc_generated_output = discriminator([input_image, gen_output], training=True)

        gen_total_loss, gen_gan_loss, gen_l1_loss = generator_loss(disc_generated_output, gen_output, target)
        disc_loss = discriminator_loss(disc_real_output, disc_generated_output)

    generator_gradients = gen_tape.gradient(gen_total_loss, generator.trainable_variables)
    discriminator_gradients = disc_tape.gradient(disc_loss, discriminator.trainable_variables)

    generator_optimizer.apply_gradients(zip(generator_gradients, generator.trainable_variables))
    discriminator_optimizer.apply_gradients(zip(discriminator_gradients, discriminator.trainable_variables))

    # Calculate PSNR, RMSE, and MRAE
    psnr_value = PSNR(target.numpy(), gen_output.numpy())
    rmse_value = RMSE(target.numpy(), gen_output.numpy())
    mrae_value = MRAE(target.numpy(), gen_output.numpy())

    with summary_writer.as_default():
        tf.summary.scalar('gen_total_loss', gen_total_loss, step=step//1000)
        tf.summary.scalar('gen_gan_loss', gen_gan_loss, step=step//1000)
        tf.summary.scalar('gen_l1_loss', gen_l1_loss, step=step//1000)
        tf.summary.scalar('disc_loss', disc_loss, step=step//1000)
        tf.summary.scalar('PSNR', psnr_value, step=step//1000)
        tf.summary.scalar('RMSE', rmse_value, step=step//1000)
        tf.summary.scalar('MRAE', mrae_value, step=step//1000)
