
def MRAE(original_img, denoised_img):
    # Ensure images have the same shape
    assert original_img.shape == denoised_img.shape, "Images must have the same dimensions"

    # Compute MRAE
    if original_img.ndim == 2:  # Grayscale image
        mrae = np.mean(np.abs((original_img - denoised_img) / (original_img + 1e-8)))
    elif original_img.ndim == 3:  # Color image (RGB)
        mrae = np.mean(np.abs((original_img - denoised_img) / (original_img + 1e-8)))

    return mrae


def RMSE(original_img, denoised_img):
    # Ensure images have the same shape
    assert original_img.shape == denoised_img.shape, "Images must have the same dimensions"

    # Compute RMSE
    if original_img.ndim == 2:  # Grayscale image
        mse = np.mean((original_img - denoised_img) ** 2)
        rmse = np.sqrt(mse)
    elif original_img.ndim == 3:  # Color image (RGB)
        mse = np.mean((original_img - denoised_img) ** 2, axis=(0, 1))
        rmse = np.sqrt(np.mean(mse))

    return rmse


def PSNR(original, compressed):
    mse = np.mean((original - compressed) ** 2)
    if mse == 0:  # MSE is zero means no noise is present in the signal.
        # Therefore PSNR has no importance.
        return 100
    max_pixel = 255.0
    psnr = 20 * np.log10(max_pixel / np.sqrt(mse))
    return psnr


@tf.function
def train_step(input_image, target, step):
    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
        gen_output = generator(input_image, training=True)

        disc_real_output = discriminator([input_image, target], training=True)
        disc_generated_output = discriminator([input_image, gen_output], training=True)

        gen_total_loss, gen_gan_loss, gen_l1_loss = generator_loss(disc_generated_output, gen_output, target)
        disc_loss = discriminator_loss(disc_real_output, disc_generated_output)

    generator_gradients = gen_tape.gradient(gen_total_loss, generator.trainable_variables)
    discriminator_gradients = disc_tape.gradient(disc_loss, discriminator.trainable_variables)

    generator_optimizer.apply_gradients(zip(generator_gradients, generator.trainable_variables))
    discriminator_optimizer.apply_gradients(zip(discriminator_gradients, discriminator.trainable_variables))

    # Calculate PSNR, RMSE, and MRAE
    psnr_value = PSNR(target.numpy(), gen_output.numpy())
    rmse_value = RMSE(target.numpy(), gen_output.numpy())
    mrae_value = MRAE(target.numpy(), gen_output.numpy())

    with summary_writer.as_default():
        tf.summary.scalar('gen_total_loss', gen_total_loss, step=step//1000)
        tf.summary.scalar('gen_gan_loss', gen_gan_loss, step=step//1000)
        tf.summary.scalar('gen_l1_loss', gen_l1_loss, step=step//1000)
        tf.summary.scalar('disc_loss', disc_loss, step=step//1000)
        tf.summary.scalar('PSNR', psnr_value, step=step//1000)
        tf.summary.scalar('RMSE', rmse_value, step=step//1000)
        tf.summary.scalar('MRAE', mrae_value, step=step//1000)
